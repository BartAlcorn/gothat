package drawer

import (
	"fmt"
	"github.com/bartalcorn/gothat/pkg/components/alpinejs"
	"github.com/bartalcorn/gothat/pkg/components/button"
	"github.com/bartalcorn/gothat/pkg/formats"
	"github.com/bartalcorn/gothat/pkg/tws"
	"github.com/bartalcorn/lucide"
)

// DrawerSide represents the side from which the sheet will appear.
type Side string

// Constants for sheet sides.
const (
	Top    Side = "top"
	Right  Side = "right"
	Bottom Side = "bottom"
	Left   Side = "left"
)

// Props defines the properties for the Drawer component.
type Props struct {
	ID           string        // ID to allow for identifing and targeting this Drawer.
	Title        string        // Title
	TitleID      string        // TitleCountID if the panel is going to show an OOB devired count
	Description  string        // Description is the subheading or description text for the sheet.
	Side         Side          // Side determines from which side the sheet will appear.
	Toolbar      *ToolbarProps // optional extra toolbar buttons
	Width        string        // tailwind css width
	XShow        string        // x-data value to show the dynamic header
	XText        string        // x-text value to display as title
	Class        string        // extra classes
	ClassDetails string        // extra classes applied to the detail section
}

func (props *Props) onCloseToogle() string {
	if props.XShow != "" {
		return props.XShow + " = !" + props.XShow
	} else {
		return "isDrawer" + formats.TitleCase(string(props.Side)) + "Open = false"
	}
}

func (props *Props) getWidth() string {
	if props.Width != "" {
		return props.Width
	} else {
		return "w-1/2"
	}
}

func (props *Props) sidedClasses() string {
	const c = "%[1]s-0 origin-%[1]s"
	return fmt.Sprintf(c, props.Side)
}

func (props *Props) translateSide() alpinejs.Direction {
	switch props.Side {
	case Top:
		return alpinejs.Top
	case Right:
		return alpinejs.Right
	case Left:
		return alpinejs.Left
	default:
		return alpinejs.Bottom
	}
}

templ Drawer(props *Props) {
	<div
		id={ props.ID }
		x-show={ props.XShow }
		{ alpinejs.Translate(&alpinejs.TranslateProps{Direction: props.translateSide()})... }
		class={ tws.TwMerge("fixed ", props.sidedClasses()," overflow-y-hidden", props.getWidth(),
		"top-[60px] bottom-[60px] z-20 bg-gray-500 border-l border-gray-400 shadow-lg focus:outline-none", props.Class) }
		role="menu"
		aria-orientation="vertical"
		aria-labelledby={ "drawer-" + string(props.Side) }
		tabindex="-1"
		style="display: none;"
	>
		<section class={ tws.TwMerge("h-full w-full", props.ClassDetails) }>
			<div class="h-[40px] px-3 w-full flex flex-row flex-nowrap items-center justify-between">
				<span
					class="text-gray-900 text-lg font-bold"
				>
					if props.Title != "" {
						<span>{ props.Title }</span>
					}
					<span
						id={ props.ID + "-title" }
						if props.XText !="" {
							x-text={ props.XText }
						}
					></span>
					<span id={ props.ID + "-count" }></span>
				</span>
				@button.Button(&button.Props{
					Variant:  button.Icon,
					Click:    props.onCloseToogle(),
					IconLeft: lucide.SquareX(lucide.Props{}),
				})
			</div>
			{ children... }
		</section>
	</div>
}

type ToolbarProps struct {
	ID       string            // id for counts
	Title    string            // title, overridden in XText is present
	XText    string            // x-text value to display as title
	Controls []templ.Component // slice of Icon Buttons
	Class    string            //extra clesses, just in case...
}

func (props *ToolbarProps) getTitle() string {
	if props.Title != "" {
		return props.Title
	} else {
		return "Oops..."
	}
}

templ DrawerToolbar(props *ToolbarProps) {
	<div class={ tws.FlexRowCB, "w-full" }>
		<div class="h-[40px] px-4 w-full flex flex-row flex-nowrap items-center justify-between">
			<span
				class="text-gray-900 text-lg font-bold flex-nowrap px-4 "
				if props.XText != "" {
					x-text={ props.XText }
				}
			></span>
			if props.ID != "" {
				<span id={ props.ID + "-count" }></span>
			}
		</div>
		if props.Controls != nil && len(props.Controls) > 0 {
			for _, ctrl := range props.Controls {
				@ctrl
			}
		}
	</div>
}
