package button

import (
	"github.com/bartalcorn/gothat/pkg/htmx"
	"github.com/bartalcorn/gothat/pkg/tws"
)

type Variant string
type Size string

type Props struct {
	Variant    Variant          // determines the visual style of the button
	Label      string           // is the text content of the button, not used if Content is present
	Size       Size             // the size of the button.
	Click      string           // the JavaScript function to be called when the button is clicked. Usually by AlpineJS
	Prevent    bool             // is a bool to indicate whether the default action should occur onClick
	Disabled   bool             // can be either a bool or a string.
	IconLeft   templ.Component  // specifies an icon component to be displayed on the left side of the button text
	IconRight  templ.Component  // specifies an icon component to be displayed on the right side of the button text
	Content    templ.Component  // for truly dynamic button content
	Attrs      templ.Attributes // allows for additional HTML attributes
	HX         htmx.Props       // allows for HTMX attributes
	BoundClass string           // specifies additional CSS classes to apply when the bounded condition is met
	Class      string           // specifies additional CSS classes to apply to the button to override any previous class
}

const (
	base           string = "inline-block items-center justify-center space-x-4 space-y-3 whitespace-nowrap text-base leading-4 transition-colors no-ring"
	diabled        string = " disabled:text-neutral-500/50 disabled:border-gray-200/60 disabled:bg-gray-200/20 disabled:hover:border-bg-gray-200/10 disabled:hover:bg-gray-200/10"
	diabledSpecial string = " disabled:border-gray-600 disabled:bg-gray-600"

	Neutral   Variant = "neutral"
	Primary   Variant = "primary"
	Secondary Variant = "secondary"
	Text      Variant = "text"
	Error     Variant = "error"
	Danger    Variant = "danger"
	Warning   Variant = "warning"
	Success   Variant = "success"
	Info      Variant = "info"
	Icon      Variant = "icon"
	Gray      Variant = "gray"

	Md Size = "md"
	Sm Size = "sm"
	Lg Size = "lg"
)

func (p *Props) variant() string {
	switch p.Variant {
	case Primary:
		return tws.Primary + " " + tws.Disabled
	case Secondary:
		return tws.Secondary + " " + tws.Disabled
	case Text:
		return "text-base hover:text-blue-600"
	case Danger:
		return tws.Danger + " " + tws.Disabled
	case Error:
		if p.Label != "" {
			return "rounded-lg border border-rose-500 bg-white text-rose-500 bg-rose-500-light" + diabledSpecial
		}
		return "text-rose-500 hover:text-blue-500 disabled:text-gray-400"
	case Icon:
		return "text-gray-300 hover:text-blue-500"
	case Warning:
		return tws.Warning + " " + tws.Disabled
	case Success:
		return tws.Success + " " + tws.Disabled
	case Info:
		return tws.Info + " " + tws.Disabled
	default:
		return "inline-flex w-fit items-center justify-between gap-2 whitespace-nowrap border-zinc-300 bg-zinc-100 px-4 py-2 text-sm font-medium capitalize tracking-wide text-neutral-600 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-700 rounded-lg border" + diabled
	}
}

func (p *Props) size() string {
	if p.Variant == Icon {
		return "px-1 py-2 text-base"
	}
	switch p.Size {
	case Sm:
		return "px-3 py-2 text-xs"
	case Md:
		return "px-3 py-2 text-sm"
	default:
		return "px-3 py-2 text-base"
	}
}

templ Button(props *Props) {
	<button
		if props.Click !="" {
			if props.Prevent {
				@click.prevent.stop={ props.Click }
			} else {
				@click.stop={ props.Click }
			}
		}
		class={ tws.TwMerge(base, " rounded-xs", props.variant(), props.size(), tws.NoRing, props.Class) }
		if props.BoundClass !="" {
			:class={ props.BoundClass }
		}
		if props.HX.HasMethod() {
			{ props.HX.Attrbs()... }
		}
		{ props.Attrs... }
		disabled?={ props.Disabled }
	>
		{ children... }
		@content(props)
	</button>
}

templ content(props *Props) {
	<span class="flex flex-row items-center gap-1">
		if props.IconLeft != nil {
			@props.IconLeft
		}
		if props.Content != nil {
			<span class="px-1">
				@props.Content
			</span>
		}
		{ props.Label }
		if props.IconRight != nil {
			@props.IconRight
		}
	</span>
}
