package button

import (
	"github.com/bartalcorn/gothat/pkg/htmx"
	"github.com/bartalcorn/gothat/pkg/tws"
)

type Variant string
type Size string

type Props struct {
	// Variant determines the visual style of the button.
	Variant Variant `default:"primary"`

	// Label is the content of the button.
	// Default: "" (empty string)
	Label string

	// Size sets the size of the button.
	Size Size `default:"md"`

	// FullWidth determines whether the button should take up the full width of its container.
	// Default: false
	FullWidth bool

	// Click is the JavaScript function to be called when the button is clicked. Usuallu by AlpineJS
	// Default: ""
	Click string

	// Prevent is a bool to indicate whether the default action should occur onClick
	// Default: false
	Prevent bool

	// HX allows passing additional HTMX attributes to the button or anchor element.
	// Default: nil
	HX htmx.Props

	// Disabled can be either a bool or a string.
	// If bool (Go), it directly controls the disabled state.
	// If string, it's treated as a JavaScript expression for dynamic disabling.
	Disabled bool

	// IconLeft specifies an icon component to be displayed on the left side of the button text.
	// Use IconLeft with a label for an Icon button
	// Default: nil
	IconLeft templ.Component

	// IconRight specifies an icon component to be displayed on the right side of the button text.
	// Default: nil
	IconRight templ.Component

	// Content - for truly dynamic button content
	// Default: nil
	Content templ.Component

	// BoundClass specifies additional CSS classes to apply when the bounded condition is met.
	// Default: "" (empty string)
	BoundClass string

	// Class specifies additional CSS classes to apply to the button to override any previous class.
	// Default: "" (empty string)
	Class string

	// Attrs allows passing additional HTML attributes to the button or anchor element.
	// Default: nil
	Attrs templ.Attributes
}

const (
	base           string = "inline-block items-center justify-center space-x-4 space-y-3 whitespace-nowrap text-base leading-4 transition-colors no-ring"
	diabled        string = " disabled:text-white disabled:border-gray-400 disabled:bg-gray-400 disabled:hover:border-gray-600 disabled:hover:bg-gray-600"
	diabledSpecial string = " disabled:border-gray-600 disabled:bg-gray-600"

	Primary   Variant = "primary"
	Secondary Variant = "secondary"
	Text      Variant = "text"
	Delete    Variant = "delete"
	Error     Variant = "error"
	Warning   Variant = "warning"
	Success   Variant = "success"
	Info      Variant = "info"
	Icon      Variant = "icon"
	Gray      Variant = "gray"

	Md Size = "md"
	Sm Size = "sm"
	Lg Size = "lg"
)

func (p *Props) variant() string {
	switch p.Variant {
	case Secondary:
		return "border border-blue-500 bg-white text-blue-500 hover:bg-blue-50" + diabled
	case Text:
		return "text-base hover:text-blue-600"
	case Delete:
		return "border border-rose-500 bg-white text-rose-500 hover:bg-rose-500-light disabled:border-gray-600 disabled:bg-transparent"
	case Error:
		if p.Label != "" {
			return "border border-rose-500 bg-white text-rose-500 bg-rose-500-light" + diabledSpecial
		}
		return "text-rose-500 hover:text-blue-500 disabled:text-gray-400"
	case Icon:
		return "text-gray-300 hover:text-blue-500"
	case Warning:
		if p.Label != "" {

			return "border border-yellow-500 bg-white text-yellow-500 bg-yellow-500-light" + diabledSpecial
		}
		return "text-yellow-500 hover:text-blue-500 disabled:text-gray-400"
	case Success:
		if p.Label != "" {
			return "border border-green-500 bg-white text-green-500 bg-green-500-light" + diabledSpecial
		}
		return "text-green-500 hover:text-blue-500 disabled:text-gray-400"
	case Info:
		if p.Label != "" {
			return "border border-blue-500 bg-white text-blue-500 bg-blue-500-light" + diabledSpecial
		}
		return "text-blue-500 hover:text-blue-500 disabled:text-gray-400"
	default:
		return "inline-flex w-fit items-center justify-between gap-2 whitespace-nowrap border-zinc-300 bg-zinc-100 px-4 py-2 text-sm font-medium capitalize tracking-wide text-neutral-600 transition hover:opacity-75 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-700 rounded-lg border" + diabled
	}
}

func (p *Props) size() string {
	if p.Variant == Icon {
		return "px-1 py-2 text-base"
	}
	switch p.Size {
	case Sm:
		return "px-3 py-2 text-xs"
	case Md:
		return "px-3 py-2 text-sm"
	default:
		return "px-3 py-2 text-base"
	}
}

templ Button(props *Props) {
	<button
		{ props.Attrs... }
		if props.Click !="" {
			if props.Prevent {
				@click.prevent.stop={ props.Click }
			} else {
				@click.stop={ props.Click }
			}
		}
		class={ tws.TwMerge(base, " rounded-sm", props.variant(), props.size(), tws.NoRing, props.Class) }
		if props.BoundClass !="" {
			:class={ props.BoundClass }
		}
		if props.HX.HasMethod() {
			{ props.HX.Attrbs()... }
		}
		if props.Disabled {
			disabled
		}
	>
		{ children... }
		@renderButtonContent(props)
	</button>
}

templ renderButtonContent(props *Props) {
	<span class="flex flex-row items-center gap-1">
		if props.IconLeft != nil {
			@props.IconLeft
		}
		if props.Content != nil {
			@props.Content
		}
		{ props.Label }
		if props.IconRight != nil {
			@props.IconRight
		}
	</span>
}
