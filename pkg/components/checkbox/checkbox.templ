package checkbox

type Props struct {
	Name        string
	Label       string
	LabelLeft   string
	Classes     string
	Checked     bool
	Description string
	OnChange    string
	Click       string
	XModel      string
}

templ Checkbox(props *Props) {
	<div class="flex flex-col items-start">
		<label
			for={ props.Name }
			class="flex cursor-pointer items-center gap-2 text-base font-medium text-neutral-600  [&:has(input:checked)]:text-neutral-900 dark:[&:has(input:checked)]:text-zinc-50 [&:has(input:disabled)]:opacity-75 [&:has(input:disabled)]:cursor-not-allowed"
		>
			if props.LabelLeft != "" {
				<span>{ props.LabelLeft }</span>
			}
			<div class="relative flex items-center">
				<input
					id={ props.Name }
					type="checkbox"
					class="before:content[''] peer relative size-5 cursor-pointer appearance-none overflow-hidden rounded border border-gray-300 bg-gray-100 before:absolute before:inset-0 checked:border-blue-600 checked:before:bg-blue-600 focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-zinc-500 checked:focus:outline-blue-600 active:outline-offset-0 disabled:cursor-not-allowed dark:border-zinc-700 dark:bg-zinc-800 dark:checked:border-sky-600 dark:checked:before:bg-sky-600 dark:focus:outline-zinc-500 dark:checked:focus:outline-sky-600"
					if props.Checked {
						checked
					}
				/>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 24 24"
					aria-hidden="true"
					stroke="currentColor"
					fill="none"
					stroke-width="4"
					class="absolute invisible text-white -translate-x-1/2 -translate-y-1/2 pointer-events-none left-1/2 top-1/2 size-4 peer-checked:visible dark:text-white"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"></path>
				</svg>
			</div>
			if props.Label != "" {
				<span>{ props.Label }</span>
			}
		</label>
		if props.Description !="" {
			<span
				id="checkboxDescription"
				class="ml-6 text-sm text-neutral-600 dark:text-gray-200"
			>
				{ props.Description }
			</span>
		}
	</div>
}

templ Containered(props *Props) {
	<label
		for={ props.Name }
		class="inline-flex min-w-fit cursor-pointer items-center justify-between rounded-lg gap-3 border border-zinc-300 bg-zinc-100 px-4 py-2 text-sm font-medium text-neutral-600 dark:border-zinc-700 dark:bg-zinc-800 dark:text-zinc-200 [&:has(input:checked)]:text-neutral-900 dark:[&:has(input:checked)]:text-zinc-50 [&:has(input:disabled)]:opacity-75 [&:has(input:disabled)]:cursor-not-allowed"
	>
		if props.LabelLeft != "" {
			<span>{ props.LabelLeft }</span>
		}
		<div class="relative flex items-center">
			<input
				id={ props.Name }
				type="checkbox"
				class="before:content[''] peer relative size-4 cursor-pointer appearance-none overflow-hidden rounded border border-zinc-300 bg-zinc-50 before:absolute before:inset-0 checked:border-blue-600 checked:before:bg-blue-600 focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-zinc-500 checked:focus:outline-blue-600 active:outline-offset-0 disabled:cursor-not-allowed dark:border-zinc-700 dark:bg-zinc-900 dark:checked:border-sky-600 dark:checked:before:bg-sky-600 dark:focus:outline-zinc-500 dark:checked:focus:outline-sky-600"
				if props.Checked {
					checked
				}
			/>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 24 24"
				aria-hidden="true"
				stroke="currentColor"
				fill="none"
				stroke-width="4"
				class="absolute invisible text-white -translate-x-1/2 -translate-y-1/2 pointer-events-none left-1/2 top-1/2 size-3 peer-checked:visible dark:text-white"
			>
				<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"></path>
			</svg>
		</div>
		if props.Label != "" {
			<span>{ props.Label }</span>
		}
	</label>
}
