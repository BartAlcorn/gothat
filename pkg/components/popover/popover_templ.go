// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package popover

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/bartalcorn/nanoid"
	"strings"
)

type Props struct {
	// ID - if not supplied, random will be generated
	ID string `default:""`

	// if present, and TriggerContent is nil,
	// will display as the button Label of the
	// default styled trigger button
	TriggerLabel string `default:"click"`

	// any templ.Component
	TriggerContent templ.Component

	//
	PopOverContent templ.Component

	// placement relative to trigger
	// top, top-start, top-end
	// left, left-start, left-end
	// right, right-start, right-end
	// bottom, bottom-start, bottom-end
	Placement string `default:"top"`

	// On - click, hover
	On string `default:"click"`

	// if On is set to 'click', then away being true will close
	// the popover display on any click not ON the display.
	Away bool

	Class string
}

func (p *Props) ref() string {
	if p.ID != "" {
		return "popover-" + p.ID
	}
	return "popover-" + nanoid.WebSafeID()
}

func (p *Props) anchor() templ.Attributes {
	if strings.Contains(p.Placement, ".") {
		p.Placement = strings.ReplaceAll(p.Placement, ".", "")
	}
	if p.Placement == "" {
		p.Placement = "top"
	}

	return templ.Attributes{"x-anchor." + p.Placement + ".offset.4": "$refs.popover"}
}

func Popover(props *Props) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"{ __isOpen: false }\"><button x-ref=\"popover\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.On == "" || props.On == "click" {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" @click=\"__isOpen = ! __isOpen\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if props.On == "hover" {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" @mouseenter=\"__isOpen = true\" @mouseleave=\"__isOpen = false\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" class=\"relative got-component\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = props.TriggerContent.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button><div x-cloak x-show=\"__isOpen\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, props.anchor())
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if (props.On == "" || props.On == "click") && props.Away {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" @click.away=\"__isOpen = false\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" class=\"relative min-w-fit max-w-16 text-center rounded-lg shadow-xs z-10 bg-white p-1.5 outline-hidden border border-gray-200\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = props.PopOverContent.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
